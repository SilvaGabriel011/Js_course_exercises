day 15 02072025
    destructuring arrays 
        const [value1, , value2] = object.propertieThatIsAFunction(parameter1, parameter2)
                the empty space is when we want to skip and element
            returns the values that the functions propose as 2 separate value 
                or smothing like that
    destruct objects
        its useful to set default values
        arr = [ 7,8,9]
        newArr = [1,2,...arr]
            the spread operator write the values individually 
        spread operator takes the eelements from the array and dosent create new variables
        const copyArray = [...oldArray]
            creates a shallow copy of the array 
        multiple values separeted by a coma are only expected when we pass arguments into a function or when building a new array 
        can copy the object into a new one with spread (...)
            const newObject = {...object}
                newObject.propertie = new value
                    it doesnt change the propertie from the original/first object 

    rest parameter and parameters 
        pack elements into a array
        const [a,b,...others] = [1, 2, 3, 4, 5]
            its a rest operathor because it is on the left side of the equality 
            the rest should be the last element 
        const add = function(...numbers){
                the ... are being compressed into one array 
                    doesnt matter how many argments are being passed 
            sum = 0
            for(let i =0; i < numbers.length; i++) sum += numbers[i]
        }
        add(2,3)
        add(3,4,5,6)
        so rest can be used when we would write names separate by comas
    
    SHORT CIRCUITING (&& AND ||)
        it can be used any data type and can return any data type
        short-circuiting 
        ||operator
            if the first value is truthy/true value
                the second dosent get evalueated
            if all of the operators are falsy, returns the last one 
        in the && when the evaluation gets to a alement that its falsy it returns it 
            so the first value that has falsy/false type of data it's returned 
            returns the last element if all are truthy 
     
    the nullish coalescing opeartor 
        ??
        works with the idea of nullish values
            null and undefined 
            only those two will shortcut the evaluation 
        the first non nullish value is returned 
        link for stud better 
    https://chatgpt.com/share/6867d6f8-d864-800a-a9c6-18057044e17c


day16 03072025

    logical assignement operators
        the or (||) assignment operator 
            assignes a value to a variable if that variable is currently falsy 
                a.propertie = a.propertie || 10
                    can be write as 
                    a.propertie||= 10
                    if there are difference betwen the properties it will be then assigned the value 10 as a value of the propertie 
                        so if the object dosent have the propertie it will then get the propertie and also the value 10 

        the nullish asignment operator (??)
            it will evalueate if one of the values are null/undefined and if so it shortcut
                will assgine a value to a variable if that variable is nullish/undifined 
        
        the and asignment operator (&&)
            it will return the first falsy value 
                a.propertie = a.propertie && 'falsy'
                    if both of the properties are the same the 'falsy' is returned 
                    a.propertie &&= 'falsy'
    
    loop over arrays - for of loop
        automaticly loop over the entire array 
            and each iteration it will give acces to the current item iteration 
        its able to use continue/break 
        for (const item of items){block of code}

        exemple of destructuring a for of loop 

            for (const item of menu.entries()){
                console.log(`${item[0] + 1}: ${item[1]}`);
            }
                should return
                1: foccacia
                2: bruschetta ...

            with destructuring 
            for each pair of [index, value] give me i and el 
                
                for (const [i,el] of menu.entries()){
                    console.log(`${i + 1}: ${item[el]}`);
                }
                    should return
                    1: foccacia
                    2: bruschetta ...


day17 04072025

    enhanced object literals 
        put the object inside the other withou being repetitive 
            instead of a , properties:properties, b...
                a, propertie, b ... 
        dosent need to declare the function with the function keyword 
        also naming properties can be done dinamicaly with the used of []
            inside of the [] can be put anything that ir read as a value 
    
    optional chaning 
        if certain propertie does not exist its logged undefined 
            object.propertie?.propertie2
                only if the propertie behind the question mark exist the second propertie will be seached for
                if not undefined is returned 
        can be called for methods aswell
            object.method?.()
            the question mark test if the value on the left exists 
        its usually combined if the nullish coalescing operator 

    Looping objects 
        object.keys(objectCreated)
            return in an array all of the keys of the object inside the parentesis 
        object.values(objectCreated)
            return an object with the values 
                in a ordinated way 
        object.entries(objectCreated)
            return the index number and the element itself as an array 
                first the key and then the value 
            when we get the object and the array we can deconstruct to make more iterable

            exemple
                for (const [day, { open, close }] of entries)
                     {
                console.log(`On ${day} we open at ${open} and close at ${close}`);
                     }   

day18 07072025

    sets
        just a collection of unique values 
        to create a set we use
            new Set ([iterable])
                cont randomSet = new Set ([1,2,3 'a','b'])
            the duplicates are gone
        a set are iterable 
        the order of the elements are irrelevant 
        can also have strings 
        to get the lenght we use .size 
            randomSet.size // 5 
        has method 
            work as include of the arrays method 
            randomSet.has 
        we can add new elements trough
            .add method
        we can delete elements 
            .delete method 
        there are no indexes in sets 
        its good only to know if we use just to see if a value is in there
        can delete all of the elements of a set with one method 
            .clear method 
        in a normal code base we use sets to remove duplicate of arrays 
            this example shows how to transform a array with doubled values and make it to a set, to create a 'container' with no repetition, and after that make it back to an array
            const staff = ['waiter', 'chef', 'waiter', 'manager', 'chef', 'waiter']
            const staffUnique = new set(staff)
                const staffUnique = [...new set(staff)]
                    this is possible because the spread works on iterables 
            const staffUniqueAsArray = ...staffUnique
        NEW SETS METHODS 

            // const italianFoods = new Set([
            //   'pasta',
            //   'gnocchi',
            //   'tomatoes',
            //   'olive oil',
            //   'garlic',
            //   'basil',
            // ]);

            // const mexicanFoods = new Set([
            //   'tortillas',
            //   'beans',
            //   'rice',
            //   'tomatoes',
            //   'avocado',
            //   'garlic',
            // ]);

            intersection method 
                const commonFoods = italianFoods.intersection(mexicanFoods) // new set wit only the elements that are duplicates between both of the sets 
            union method    - all of the elements of both saets without the duplicates 
                const italianMexicanFusion = italianFoods.union(mexicanFoods)
            difference method - all the elemnts that are on the first set but not in the second one 
                const uniqueItalianFood = italianFoods.difference(mexicanFoods)
            unique method - all of that just present exclusively on both of the sets
                const uniqueItalianMexicanFood = italianFoods.symetricDifference(mexicanFoods)
    

    maps 
        can use to map values to keys
        the keys can have any type
            the keys could be objects, arrays, maps
        const rest = new map()
        rest.set('name','classico')
            function as the add method 
            so this is 
            ('key' , 'value')
            withi will look like 
            0 : {key => value}
                and the value can be anything 
                can get chain .set to update the map 
        to retrieve data we use .get method 
            can be used with the key 
                the type of the data is sensible to retrieve the data 
        check if the map has a certain key 
            .has method 
            rest.has('keyName')
        delete a key value on map with the .delete method 
        check the size of sets 
            .size method 
    
    maps iterations 
        we can create and add elements to a map without using the .set
            const mapArrayOfArrays = new map ([[key1,vale1],[key2,value2]])
        it is also possible to convert an object to a map 
            const convertedObject = new map(object.entries(objectToBeConverted))
        are also iterables 

        question.get(question.get('correct') === answer)

        map back to an array 
            build a neww aray and unpack the map inside of it using spread
                ([...map])
            can have the map deconstruct inside a array and use the methods of an array 
    
    witch data structure we use ? 
        sources of data 
            from progman itself
            user innerface (ui)
            external sources - api 
        collection of data 
            data structure 
                simple list of values 
                    array OR set
                key/value pair 
                    maps OR object 
        WHEN GETTING DATA FRMO WEB API 
            data from web api is fetched as json 
                object/map 
        there are more than the for built in data structures 
        
        ARRAYS 
            VALUES ORDERED 
            MANIPULATE DATA 
        SETS 
            UNIQUE VALUES 
            HIGH PERFORMANCE 
            REMOVE DUPLICATE 
        OBJECTS
            MORE TRDITIONAL 
            EASIER TO WRITE AND ACCES
            functions as values (methods, also possible to use this keyword)
        MAPS
            BETTER PERFOMANCE 
            KEYS CAN HAVE ANY DATA TYPE 
            EASY TO ITERATE 
            EASY TO COMPUTE SIZE 


    working with strings 
        strings are zerobased 
        strgins are primitive so impossible to mutate 
        boxing 
            takes a strings and puts into a box wich is an object 
            
day19 08072025

    working with strings 1
        string.toLowerCase
        string.UpperCase
        string[0].toUpperCase() + passenger.toLowerCase.slice(1)
            to make the first latter cappital and rest lowercase
                can be done as 
                    -> string.replace(string[0], string[0].toUpperCase())
        string.trim()
            correct spaces 
        all of them are case sensitive 
            string.replace('what will be replaced', 'what will replace')
                can do chaning 
                only replace the first ocurrency of te search 
                string.replace(/what will be globaly replaced/g, 'what will replace')
            string.replaceAll()
                replace all the ocurrencies 
            return booleans
                string.includes()
                string.startWith()
                string.endsWith()
        when receiving strings, start to put all of it in lowercase 
    
    working with strings 2
        split method 
        string.split('what will be searched to split')
            string.split(' ')
                search for spaces then whats besides it will be stored in to an array 
            allow us to divide a string based on a specific part 
            store all of was split up into a array 
        join method 
            make the elements of an array to become a unique string back 
            string.join('what will be placed betwen the elements)
        padding a string 
            add a number of carachters 
                until the string has a specific number of elements 
            string.padStart("number of elements that the strings should have', 'what will be placed to match the number specified')
                at the begining of the string 
            string.padEnd("number of elements that the strings should have', 'what will be placed to match the number specified')
                at the end of the string
            repeat method 
                string.repeat('number of times that the string will be repeated')
    

    WHEN LOOPING TROUGH AN ARRAY AND NEED THE indexes
        BECAUSE IT IS A FOR OF LOOP
            WE USE ARR.ENTRIES()
            AND THEN DECONSTRUCT THE VARIABLES 
            like
                for( const [index, value] of array.entries()){
                    console.log(index, value)
                }
                    will print the position of wich value is inside of the array 
    